#!/usr/bin/env sh
partition=0
format=0
dryrun=0
installonly=0
askwifi=0
showconfig=0

while getopts 'pfdiwc' OPTION; do
  case "$OPTION" in
    p)
      partition=1
      ;;
    f)
      format=1
      ;;
    d)
      dryrun=1
      ;;
    i)
      installonly=1
      ;;
    w)
      askwifi=1
      ;;
    c)
      showconfig=1
      ;;
  esac
done
shift $(($OPTIND - 1))

machine=$1

if [ -z "$machine" ]; then
  echo "Usage: $0 [-pfst] <machine>"
  echo "  -p Create partitions"
  echo "  -f Format partitions"
  echo "  -d Dry run the script (display commands only)"
  echo "  -i Skip everything except install step"
  echo "  -w Ask for Wifi details"
  echo " Example: $0 -pf <aramid|spruce>"
  exit 0
fi

source lib/commands.sh
source secrets/wifi

ssd=$(cat ./src/machines/$machine/drive)
boot_partition=${ssd}p1
lvm_partition=${ssd}p2

if [ "$installonly" -eq "0" ]; then
  if [ "$askwifi" -eq "1" ]; then
    echo "Network name (SSID)?"
    read ssid
    echo "Password (PSK)?"
    read psk
  fi

  STATE "NET" "Setup Network"
  RUN "wpa_passphrase \"$ssid\" \"$psk\" > /etc/wpa_supplicant.conf"
  wireless_interface=`ls /sys/class/ieee80211/*/device/net/`
  RUN "wpa_supplicant -B -i$wireless_interface -c/etc/wpa_supplicant.conf"
  RUN "while ! ping -c 1 google.com > /dev/null 2>&1; do sleep 1; done"
fi

if [ "$partition" -eq "1" ]; then
  STATE "PART" "Setup partitions"
  boot_part_size="2GB"
  RUN "parted -s $ssd -- mklabel gpt"
  RUN "parted -s $ssd -- mkpart ESP fat32 1MB ${boot_part_size}"
  RUN "parted -s $ssd -- mkpart primary ${boot_part_size} 100%"
  RUN "parted -s $ssd -- set 1 esp on"

  STATE "CRYP" "Setup drive encryption"
  RUN "cryptsetup luksFormat $lvm_partition"         # Asks for an encryption password
fi

if [ "$installonly" -eq "0" ]; then
  RUN "cryptsetup luksOpen $lvm_partition nixos-enc" # Decrypt partition
fi

if [ "$partition" -eq "1" ]; then
  STATE "VOL " "Setup logical volumes"
  RUN "pvcreate /dev/mapper/nixos-enc"               # LVM Physical volume
  RUN "vgcreate nixos-vg /dev/mapper/nixos-enc"      # Volume Group
  RUN "lvcreate -L 32G -n swap nixos-vg"             # Swap (logical volume)
  RUN "lvcreate -l 100%FREE -n root nixos-vg"        # Root (main) filesystem (logical volume)
fi

if [ "$format" -eq "1" ]; then
  STATE "FORM" "Format partitions"
  RUN "mkfs.vfat -n boot $boot_partition"
  RUN "mkfs.ext4 -F -L nixos /dev/nixos-vg/root"
  RUN "mkswap -q -L swap /dev/nixos-vg/swap"
  RUN "swapon /dev/nixos-vg/swap"
fi

if [ "$installonly" -eq "0" ]; then
  STATE "MNT " "Mount partitions"
  RUN "mount /dev/nixos-vg/root /mnt"
  RUN "mkdir -p /mnt/boot"
  RUN "mount $boot_partition /mnt/boot"

  STATE "CHAN" "Switch to unstable channel"
  RUN "nix-channel --add https://nixos.org/channels/nixos-unstable nixos"
  RUN "nix-channel --update"

  STATE "GEN " "Generate config"
  RUN "nixos-generate-config --root /mnt"
  if [ "$showconfig" -eq "1" ]; then
    STATE "LESS" "Inspect generated hardware-configuration.nix"
    less /mnt/etc/nixos/hardware-configuration.nix
    STATE "LESS" "Inspect generated configuration.nix"
    less /mnt/etc/nixos/configuration.nix
  fi
fi

STATE "UUID" "Fetch UUID of LUKS partition"
RUN_WITH_RESULT "lsblk -o FSTYPE,UUID | grep crypto_LUKS | tr -d 'crypto_LUKS ' | tr -d '\n'"
# TODO: Use search term that will match even when a UUID was already set
RUN "sed -i 's/LUKS_UUID/$run_result/' src/machines/$machine/machine.nix"
RUN "grep luks_device src/machines/$machine/machine.nix"

STATE "INST" "Install NixOS"
WAIT "Install NixOS?"
RUN_WITH_RESULT "nix-build -I nixos-config=src/minimal-configuration.nix '<nixpkgs/nixos>' -A system --no-out-link"
RUN "nixos-install --no-root-password --system $run_result"

STATE "DONE" "Complete"