#!/usr/bin/env sh

source lib/keepass.sh

action=REBUILD
show_trace=
command=test
cleanup=0
while getopts 'hdsyurbctm' OPTION; do
  case "$OPTION" in
    h)
      echo "Usage: $0 [-hdsur] [commit message/machine]"
      echo "  -h                   this help"
      echo "  -d                   run nix-collect-garbage"
      echo "  -s                   rebuild & switch"
      echo "  -y                   dry run"
      echo "  -u                   upgrade channel and switch"
      echo "  -b                   rebuild & boot"
      echo "  -r [commit message]  release - rebuild & switch, with optional git commit"
      echo "  -m [machine]         Build a different machine from the running one. e.g. sirius/aramid/spruce/sapling"
      echo "  -c                   Diff of changes between latest & prev upgrade"
      echo "  -t                   Show trace"
      exit 0
      ;;
    d)
      cleanup=1
      ;;
    s)
      action=SWITCH
      command=switch
      ;;
    y)
      command=dry-build
      ;;
    b)
      action=BOOT
      command=boot
      ;;
    u)
      action=UPGRADE
      command=switch
      ;;
    c)
      nvd diff $(ls -d1v /nix/var/nix/profiles/system-*-link|tail -n 2)
      exit 0
      ;;
    t)
      show_trace=--show-trace
      ;;
    m)
      command=build
      machine=GET
      ;;
    r)
      action=RELEASE
      command=switch
      shift $(($OPTIND - 1))
      commit_msg="$1"

      if [ -z "$commit_msg" ]; then
        git diff-index --quiet HEAD --
        if [ "$?" -eq "0" ]; then
          commit_msg=$(git lo -1 | grep "\(.*\)")
        else
          echo "Can't release with uncommited files."
          exit 1
        fi
      else
        git commit -am "$commit_msg"
      fi

      ;;
  esac
done
shift $(($OPTIND - 1))

if [ "$machine" = "GET" ]; then
  machine=$1
else
  machine=$(hostname)
  commit_msg=$1
fi

configuration_nix=src/machines/$machine

# Check we have Internet
if ! ping -c 1 google.com > /dev/null 2>&1; then
  echo "No Internet connection. Connect to:"
  echo "Network name (SSID)?"
  read ssid
  echo "Password (PSK)?"
  read psk
  sudo iwctl --passphrase=$psk station wlan0 connect $ssid
fi

NIXOS_LABEL=$(echo $commit_msg | sed -E -e 's/[^a-zA-Z0-9:_\.-]/_/g')
[ "$NIXOS_LABEL" ] && echo "[LABEL] $NIXOS_LABEL"

# Check if both catppuccin and nixos-hardware channels have been added
if ! sudo nix-channel --list | tr '\n' ' ' | grep -sE 'catppuccin.*nixos-hardware' > /dev/null; then
  sudo nix-channel --add https://github.com/catppuccin/nix/archive/main.tar.gz catppuccin
  sudo nix-channel --add https://github.com/NixOS/nixos-hardware/archive/master.tar.gz nixos-hardware
  action=UPGRADE
fi

# Fetch hashed_password and ssh keys unless they already exist
if [ ! -f secrets/hashed_password ]; then
  askpass "Enter database password:"
  keepass_export_password

  # Export public/private keys for this machine to ~/.ssh/
  mkdir -p $HOME/.ssh
  chmod 700 $HOME/.ssh
  keepass_export_keys $prefix $machine
  keepass_export_keys $prefix $machine github
  keepass_export_keys $prefix $machine gitlab
fi

# Export all public keys to secrets/ for use in src/ssh.nix
for m in spruce sirius aramid sapling; do
  if [ ! -f secrets/${prefix}_${m}.pub ]; then
    askpass "Enter database password:"
    keepass_export_key public ${prefix}_${m} secrets/
  fi
done

# Set the UUID of the LUKS partition (unless already set)
if [ ! -f src/machines/$machine/luks_uuid ]; then
  lsblk -o FSTYPE,UUID | grep crypto_LUKS | tr -d "crypto_LUKS " | tr -d "\n" > src/machines/$machine/luks_uuid
  sed -i "s/LUKS_UUID/$(cat src/machines/$machine/luks_uuid)/" src/machines/$machine/minimal.nix
fi

echo "[$action] $machine"
[ "$cleanup" = "1" ] && sudo nix-collect-garbage -d
[ "$action" = "UPGRADE" ] && sudo nix-channel --update
sudo NIXOS_LABEL=$NIXOS_LABEL nixos-rebuild $command -I nixos-config=$configuration_nix $show_trace
#                                                           -I nixpkgs=/data/code/nixpkgs # -------^